/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package nl.igorski.lib.audio.mwengine;

public class Filter extends BaseProcessor {
  private transient long swigCPtr;

  protected Filter(long cPtr, boolean cMemoryOwn) {
    super(MWEngineCoreJNI.Filter_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Filter obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        MWEngineCoreJNI.delete_Filter(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public Filter(float aCutoffFrequency, float aResonance, float aMinFreq, float aMaxFreq, float aLfoRate, int numChannels) {
    this(MWEngineCoreJNI.new_Filter(aCutoffFrequency, aResonance, aMinFreq, aMaxFreq, aLfoRate, numChannels), true);
  }

  public void setCutoff(float frequency) {
    MWEngineCoreJNI.Filter_setCutoff(swigCPtr, this, frequency);
  }

  public float getCutoff() {
    return MWEngineCoreJNI.Filter_getCutoff(swigCPtr, this);
  }

  public void setResonance(float resonance) {
    MWEngineCoreJNI.Filter_setResonance(swigCPtr, this, resonance);
  }

  public float getResonance() {
    return MWEngineCoreJNI.Filter_getResonance(swigCPtr, this);
  }

  public boolean hasLFO() {
    return MWEngineCoreJNI.Filter_hasLFO__SWIG_0(swigCPtr, this);
  }

  public void hasLFO(boolean value) {
    MWEngineCoreJNI.Filter_hasLFO__SWIG_1(swigCPtr, this, value);
  }

  public float getLFO() {
    return MWEngineCoreJNI.Filter_getLFO(swigCPtr, this);
  }

  public void setLFO(LFO lfo) {
    MWEngineCoreJNI.Filter_setLFO(swigCPtr, this, LFO.getCPtr(lfo), lfo);
  }

  public void setLFORate(float rate) {
    MWEngineCoreJNI.Filter_setLFORate(swigCPtr, this, rate);
  }

  public void process(SWIGTYPE_p_AudioBuffer sampleBuffer, boolean isMonoSource) {
    MWEngineCoreJNI.Filter_process(swigCPtr, this, SWIGTYPE_p_AudioBuffer.getCPtr(sampleBuffer), isMonoSource);
  }

  public boolean isCacheable() {
    return MWEngineCoreJNI.Filter_isCacheable(swigCPtr, this);
  }

}
