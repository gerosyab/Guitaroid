/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package nl.igorski.lib.audio.nativeaudio;

public class SampleEvent extends BaseAudioEvent {
  private transient long swigCPtr;

  protected SampleEvent(long cPtr, boolean cMemoryOwn) {
    super(MWEngineCoreJNI.SampleEvent_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(SampleEvent obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        MWEngineCoreJNI.delete_SampleEvent(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public SampleEvent() {
    this(MWEngineCoreJNI.new_SampleEvent__SWIG_0(), true);
  }

  public SampleEvent(BaseInstrument aInstrument) {
    this(MWEngineCoreJNI.new_SampleEvent__SWIG_1(BaseInstrument.getCPtr(aInstrument), aInstrument), true);
  }

  public int getBufferRangeStart() {
    return MWEngineCoreJNI.SampleEvent_getBufferRangeStart(swigCPtr, this);
  }

  public void setBufferRangeStart(int value) {
    MWEngineCoreJNI.SampleEvent_setBufferRangeStart(swigCPtr, this, value);
  }

  public int getBufferRangeEnd() {
    return MWEngineCoreJNI.SampleEvent_getBufferRangeEnd(swigCPtr, this);
  }

  public void setBufferRangeEnd(int value) {
    MWEngineCoreJNI.SampleEvent_setBufferRangeEnd(swigCPtr, this, value);
  }

  public int getBufferRangeLength() {
    return MWEngineCoreJNI.SampleEvent_getBufferRangeLength(swigCPtr, this);
  }

  public SWIGTYPE_p_AudioBuffer synthesize(int aBufferLength) {
    long cPtr = MWEngineCoreJNI.SampleEvent_synthesize(swigCPtr, this, aBufferLength);
    return (cPtr == 0) ? null : new SWIGTYPE_p_AudioBuffer(cPtr, false);
  }

  public void setSample(SWIGTYPE_p_AudioBuffer sampleBuffer) {
    MWEngineCoreJNI.SampleEvent_setSample(swigCPtr, this, SWIGTYPE_p_AudioBuffer.getCPtr(sampleBuffer));
  }

  public void mixBuffer(SWIGTYPE_p_AudioBuffer outputBuffer, int bufferPos, int minBufferPosition, int maxBufferPosition, boolean loopStarted, int loopOffset, boolean useChannelRange) {
    MWEngineCoreJNI.SampleEvent_mixBuffer(swigCPtr, this, SWIGTYPE_p_AudioBuffer.getCPtr(outputBuffer), bufferPos, minBufferPosition, maxBufferPosition, loopStarted, loopOffset, useChannelRange);
  }

  public boolean getRangeBasedPlayback() {
    return MWEngineCoreJNI.SampleEvent_getRangeBasedPlayback(swigCPtr, this);
  }

  public void setRangeBasedPlayback(boolean value) {
    MWEngineCoreJNI.SampleEvent_setRangeBasedPlayback(swigCPtr, this, value);
  }

  public boolean getBufferForRange(SWIGTYPE_p_AudioBuffer buffer, int readPos) {
    return MWEngineCoreJNI.SampleEvent_getBufferForRange(swigCPtr, this, SWIGTYPE_p_AudioBuffer.getCPtr(buffer), readPos);
  }

  public int getPlaybackPosition() {
    return MWEngineCoreJNI.SampleEvent_getPlaybackPosition(swigCPtr, this);
  }

  public void play() {
    MWEngineCoreJNI.SampleEvent_play(swigCPtr, this);
  }

  public void stop() {
    MWEngineCoreJNI.SampleEvent_stop(swigCPtr, this);
  }

}
