/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package nl.igorski.lib.audio.nativeaudio;

public class AudioChannel {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected AudioChannel(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(AudioChannel obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        MWEngineCoreJNI.delete_AudioChannel(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public AudioChannel(float aMixVolume) {
    this(MWEngineCoreJNI.new_AudioChannel__SWIG_0(aMixVolume), true);
  }

  public AudioChannel(float aMixVolume, int aMaxBufferPosition) {
    this(MWEngineCoreJNI.new_AudioChannel__SWIG_1(aMixVolume, aMaxBufferPosition), true);
  }

  public void setAudioEvents(SWIGTYPE_p_std__vectorT_BaseAudioEvent_p_t value) {
    MWEngineCoreJNI.AudioChannel_audioEvents_set(swigCPtr, this, SWIGTYPE_p_std__vectorT_BaseAudioEvent_p_t.getCPtr(value));
  }

  public SWIGTYPE_p_std__vectorT_BaseAudioEvent_p_t getAudioEvents() {
    long cPtr = MWEngineCoreJNI.AudioChannel_audioEvents_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_std__vectorT_BaseAudioEvent_p_t(cPtr, false);
  }

  public void setLiveEvents(SWIGTYPE_p_std__vectorT_BaseAudioEvent_p_t value) {
    MWEngineCoreJNI.AudioChannel_liveEvents_set(swigCPtr, this, SWIGTYPE_p_std__vectorT_BaseAudioEvent_p_t.getCPtr(value));
  }

  public SWIGTYPE_p_std__vectorT_BaseAudioEvent_p_t getLiveEvents() {
    long cPtr = MWEngineCoreJNI.AudioChannel_liveEvents_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_std__vectorT_BaseAudioEvent_p_t(cPtr, false);
  }

  public void setProcessingChain(ProcessingChain value) {
    MWEngineCoreJNI.AudioChannel_processingChain_set(swigCPtr, this, ProcessingChain.getCPtr(value), value);
  }

  public ProcessingChain getProcessingChain() {
    long cPtr = MWEngineCoreJNI.AudioChannel_processingChain_get(swigCPtr, this);
    return (cPtr == 0) ? null : new ProcessingChain(cPtr, false);
  }

  public void setHasLiveEvents(boolean value) {
    MWEngineCoreJNI.AudioChannel_hasLiveEvents_set(swigCPtr, this, value);
  }

  public boolean getHasLiveEvents() {
    return MWEngineCoreJNI.AudioChannel_hasLiveEvents_get(swigCPtr, this);
  }

  public void setIsMono(boolean value) {
    MWEngineCoreJNI.AudioChannel_isMono_set(swigCPtr, this, value);
  }

  public boolean getIsMono() {
    return MWEngineCoreJNI.AudioChannel_isMono_get(swigCPtr, this);
  }

  public void setMuted(boolean value) {
    MWEngineCoreJNI.AudioChannel_muted_set(swigCPtr, this, value);
  }

  public boolean getMuted() {
    return MWEngineCoreJNI.AudioChannel_muted_get(swigCPtr, this);
  }

  public void setHasCache(boolean value) {
    MWEngineCoreJNI.AudioChannel_hasCache_set(swigCPtr, this, value);
  }

  public boolean getHasCache() {
    return MWEngineCoreJNI.AudioChannel_hasCache_get(swigCPtr, this);
  }

  public void setIsCaching(boolean value) {
    MWEngineCoreJNI.AudioChannel_isCaching_set(swigCPtr, this, value);
  }

  public boolean getIsCaching() {
    return MWEngineCoreJNI.AudioChannel_isCaching_get(swigCPtr, this);
  }

  public void setMixVolume(float value) {
    MWEngineCoreJNI.AudioChannel_mixVolume_set(swigCPtr, this, value);
  }

  public float getMixVolume() {
    return MWEngineCoreJNI.AudioChannel_mixVolume_get(swigCPtr, this);
  }

  public void setInstanceId(int value) {
    MWEngineCoreJNI.AudioChannel_instanceId_set(swigCPtr, this, value);
  }

  public int getInstanceId() {
    return MWEngineCoreJNI.AudioChannel_instanceId_get(swigCPtr, this);
  }

  public void addEvent(BaseAudioEvent aEvent) {
    MWEngineCoreJNI.AudioChannel_addEvent(swigCPtr, this, BaseAudioEvent.getCPtr(aEvent), aEvent);
  }

  public void addLiveEvent(BaseAudioEvent aLiveEvent) {
    MWEngineCoreJNI.AudioChannel_addLiveEvent(swigCPtr, this, BaseAudioEvent.getCPtr(aLiveEvent), aLiveEvent);
  }

  public void setMaxBufferPosition(int value) {
    MWEngineCoreJNI.AudioChannel_maxBufferPosition_set(swigCPtr, this, value);
  }

  public int getMaxBufferPosition() {
    return MWEngineCoreJNI.AudioChannel_maxBufferPosition_get(swigCPtr, this);
  }

  public void reset() {
    MWEngineCoreJNI.AudioChannel_reset(swigCPtr, this);
  }

  public void createOutputBuffer() {
    MWEngineCoreJNI.AudioChannel_createOutputBuffer(swigCPtr, this);
  }

  public SWIGTYPE_p_AudioBuffer getOutputBuffer() {
    long cPtr = MWEngineCoreJNI.AudioChannel_getOutputBuffer(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_AudioBuffer(cPtr, false);
  }

  public SWIGTYPE_p_AudioBuffer readCachedBuffer(SWIGTYPE_p_AudioBuffer aOutputBuffer, int aReadOffset) {
    long cPtr = MWEngineCoreJNI.AudioChannel_readCachedBuffer(swigCPtr, this, SWIGTYPE_p_AudioBuffer.getCPtr(aOutputBuffer), aReadOffset);
    return (cPtr == 0) ? null : new SWIGTYPE_p_AudioBuffer(cPtr, false);
  }

  public boolean canCache() {
    return MWEngineCoreJNI.AudioChannel_canCache__SWIG_0(swigCPtr, this);
  }

  public void canCache(boolean value, int aBufferSize, int aCacheStartOffset, int aCacheEndOffset) {
    MWEngineCoreJNI.AudioChannel_canCache__SWIG_1(swigCPtr, this, value, aBufferSize, aCacheStartOffset, aCacheEndOffset);
  }

  public void clearCachedBuffer() {
    MWEngineCoreJNI.AudioChannel_clearCachedBuffer(swigCPtr, this);
  }

  public void writeCache(SWIGTYPE_p_AudioBuffer aBuffer, int aReadOffset) {
    MWEngineCoreJNI.AudioChannel_writeCache(swigCPtr, this, SWIGTYPE_p_AudioBuffer.getCPtr(aBuffer), aReadOffset);
  }

}
