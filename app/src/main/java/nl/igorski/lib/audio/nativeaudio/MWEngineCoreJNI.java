/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package nl.igorski.lib.audio.nativeaudio;

public class MWEngineCoreJNI {

  static {
    try {
        System.loadLibrary( "mwengine" );
    }
    catch ( UnsatisfiedLinkError e ) {
        System.err.println( "mwengine native code library failed to load.\n" + e );
        System.exit(1);
    }
  }

  public final static native long new_int_array(int jarg1);
  public final static native void delete_int_array(long jarg1);
  public final static native int int_array_getitem(long jarg1, int jarg2);
  public final static native void int_array_setitem(long jarg1, int jarg2, int jarg3);
  public final static native void init();
  public final static native void start();
  public final static native void stop();
  public final static native void reset();
  public final static native long getMasterBusProcessors();
  public final static native boolean JavaUtilities_createSampleFromFile(String jarg1, String jarg2);
  public final static native boolean JavaUtilities_createSampleFromAsset(String jarg1, Object jarg2, String jarg3);
  public final static native void JavaUtilities_createSampleFromBuffer(String jarg1, int jarg2, int jarg3, double[] jarg4, double[] jarg5);
  public final static native void JavaUtilities_cacheTable__SWIG_0(int jarg1, int jarg2);
  public final static native void JavaUtilities_cacheTable__SWIG_1(int jarg1, int jarg2, double[] jarg3);
  public final static native boolean JavaUtilities_createTableFromFile(int jarg1, String jarg2);
  public final static native long new_JavaUtilities();
  public final static native void delete_JavaUtilities(long jarg1);
  public final static native long new_Notifications();
  public final static native void delete_Notifications(long jarg1);
  public final static native long new_WaveForms();
  public final static native void delete_WaveForms(long jarg1);
  public final static native long new_AudioChannel__SWIG_0(float jarg1);
  public final static native long new_AudioChannel__SWIG_1(float jarg1, int jarg2);
  public final static native void delete_AudioChannel(long jarg1);
  public final static native void AudioChannel_audioEvents_set(long jarg1, AudioChannel jarg1_, long jarg2);
  public final static native long AudioChannel_audioEvents_get(long jarg1, AudioChannel jarg1_);
  public final static native void AudioChannel_liveEvents_set(long jarg1, AudioChannel jarg1_, long jarg2);
  public final static native long AudioChannel_liveEvents_get(long jarg1, AudioChannel jarg1_);
  public final static native void AudioChannel_processingChain_set(long jarg1, AudioChannel jarg1_, long jarg2, ProcessingChain jarg2_);
  public final static native long AudioChannel_processingChain_get(long jarg1, AudioChannel jarg1_);
  public final static native void AudioChannel_hasLiveEvents_set(long jarg1, AudioChannel jarg1_, boolean jarg2);
  public final static native boolean AudioChannel_hasLiveEvents_get(long jarg1, AudioChannel jarg1_);
  public final static native void AudioChannel_isMono_set(long jarg1, AudioChannel jarg1_, boolean jarg2);
  public final static native boolean AudioChannel_isMono_get(long jarg1, AudioChannel jarg1_);
  public final static native void AudioChannel_muted_set(long jarg1, AudioChannel jarg1_, boolean jarg2);
  public final static native boolean AudioChannel_muted_get(long jarg1, AudioChannel jarg1_);
  public final static native void AudioChannel_hasCache_set(long jarg1, AudioChannel jarg1_, boolean jarg2);
  public final static native boolean AudioChannel_hasCache_get(long jarg1, AudioChannel jarg1_);
  public final static native void AudioChannel_isCaching_set(long jarg1, AudioChannel jarg1_, boolean jarg2);
  public final static native boolean AudioChannel_isCaching_get(long jarg1, AudioChannel jarg1_);
  public final static native void AudioChannel_mixVolume_set(long jarg1, AudioChannel jarg1_, float jarg2);
  public final static native float AudioChannel_mixVolume_get(long jarg1, AudioChannel jarg1_);
  public final static native void AudioChannel_instanceId_set(long jarg1, AudioChannel jarg1_, int jarg2);
  public final static native int AudioChannel_instanceId_get(long jarg1, AudioChannel jarg1_);
  public final static native void AudioChannel_addEvent(long jarg1, AudioChannel jarg1_, long jarg2, BaseAudioEvent jarg2_);
  public final static native void AudioChannel_addLiveEvent(long jarg1, AudioChannel jarg1_, long jarg2, BaseAudioEvent jarg2_);
  public final static native void AudioChannel_maxBufferPosition_set(long jarg1, AudioChannel jarg1_, int jarg2);
  public final static native int AudioChannel_maxBufferPosition_get(long jarg1, AudioChannel jarg1_);
  public final static native void AudioChannel_reset(long jarg1, AudioChannel jarg1_);
  public final static native void AudioChannel_createOutputBuffer(long jarg1, AudioChannel jarg1_);
  public final static native long AudioChannel_getOutputBuffer(long jarg1, AudioChannel jarg1_);
  public final static native long AudioChannel_readCachedBuffer(long jarg1, AudioChannel jarg1_, long jarg2, int jarg3);
  public final static native boolean AudioChannel_canCache__SWIG_0(long jarg1, AudioChannel jarg1_);
  public final static native void AudioChannel_canCache__SWIG_1(long jarg1, AudioChannel jarg1_, boolean jarg2, int jarg3, int jarg4, int jarg5);
  public final static native void AudioChannel_clearCachedBuffer(long jarg1, AudioChannel jarg1_);
  public final static native void AudioChannel_writeCache(long jarg1, AudioChannel jarg1_, long jarg2, int jarg3);
  public final static native long new_ADSR();
  public final static native void delete_ADSR(long jarg1);
  public final static native long ADSR_clone(long jarg1, ADSR jarg1_);
  public final static native void ADSR_cloneEnvelopes(long jarg1, ADSR jarg1_, long jarg2, ADSR jarg2_);
  public final static native void ADSR_setBufferLength(long jarg1, ADSR jarg1_, int jarg2);
  public final static native int ADSR_getBufferLength(long jarg1, ADSR jarg1_);
  public final static native float ADSR_getAttack(long jarg1, ADSR jarg1_);
  public final static native float ADSR_getDecay(long jarg1, ADSR jarg1_);
  public final static native float ADSR_getSustain(long jarg1, ADSR jarg1_);
  public final static native float ADSR_getRelease(long jarg1, ADSR jarg1_);
  public final static native void ADSR_setAttack(long jarg1, ADSR jarg1_, float jarg2);
  public final static native void ADSR_setDecay(long jarg1, ADSR jarg1_, float jarg2);
  public final static native void ADSR_setSustain(long jarg1, ADSR jarg1_, float jarg2);
  public final static native void ADSR_setRelease(long jarg1, ADSR jarg1_, float jarg2);
  public final static native long ADSR_getLastEnvelope(long jarg1, ADSR jarg1_);
  public final static native void ADSR_setLastEnvelope(long jarg1, ADSR jarg1_, long jarg2);
  public final static native long ADSR_apply__SWIG_0(long jarg1, ADSR jarg1_, long jarg2);
  public final static native long ADSR_apply__SWIG_1(long jarg1, ADSR jarg1_, long jarg2, int jarg3);
  public final static native long new_Arpeggiator();
  public final static native void delete_Arpeggiator(long jarg1);
  public final static native int Arpeggiator_MAX_STEPS_get();
  public final static native int Arpeggiator_getStepSize(long jarg1, Arpeggiator jarg1_);
  public final static native void Arpeggiator_setStepSize(long jarg1, Arpeggiator jarg1_, int jarg2);
  public final static native int Arpeggiator_getAmountOfSteps(long jarg1, Arpeggiator jarg1_);
  public final static native void Arpeggiator_setAmountOfSteps(long jarg1, Arpeggiator jarg1_, int jarg2);
  public final static native int Arpeggiator_getShiftForStep(long jarg1, Arpeggiator jarg1_, int jarg2);
  public final static native void Arpeggiator_setShiftForStep(long jarg1, Arpeggiator jarg1_, int jarg2, int jarg3);
  public final static native void Arpeggiator_setStep(long jarg1, Arpeggiator jarg1_, int jarg2);
  public final static native int Arpeggiator_getStep(long jarg1, Arpeggiator jarg1_);
  public final static native boolean Arpeggiator_peek(long jarg1, Arpeggiator jarg1_);
  public final static native float Arpeggiator_getPitchForStep(long jarg1, Arpeggiator jarg1_, int jarg2, float jarg3);
  public final static native int Arpeggiator_getBufferPosition(long jarg1, Arpeggiator jarg1_);
  public final static native void Arpeggiator_setBufferPosition(long jarg1, Arpeggiator jarg1_, int jarg2);
  public final static native void Arpeggiator_cloneProperties(long jarg1, Arpeggiator jarg1_, long jarg2, Arpeggiator jarg2_);
  public final static native long Arpeggiator_clone(long jarg1, Arpeggiator jarg1_);
  public final static native long new_LFO();
  public final static native void delete_LFO(long jarg1);
  public final static native double LFO_MAX_LFO_RATE_get();
  public final static native double LFO_MIN_LFO_RATE_get();
  public final static native float LFO_getRate(long jarg1, LFO jarg1_);
  public final static native void LFO_setRate(long jarg1, LFO jarg1_, float jarg2);
  public final static native int LFO_getWave(long jarg1, LFO jarg1_);
  public final static native void LFO_setWave(long jarg1, LFO jarg1_, int jarg2);
  public final static native void LFO_generate(long jarg1, LFO jarg1_);
  public final static native long LFO_getTable(long jarg1, LFO jarg1_);
  public final static native long new_RouteableOscillator();
  public final static native void delete_RouteableOscillator(long jarg1);
  public final static native void RouteableOscillator_destination_set(long jarg1, RouteableOscillator jarg1_, int jarg2);
  public final static native int RouteableOscillator_destination_get(long jarg1, RouteableOscillator jarg1_);
  public final static native void RouteableOscillator_speed_set(long jarg1, RouteableOscillator jarg1_, float jarg2);
  public final static native float RouteableOscillator_speed_get(long jarg1, RouteableOscillator jarg1_);
  public final static native void RouteableOscillator_wave_set(long jarg1, RouteableOscillator jarg1_, int jarg2);
  public final static native int RouteableOscillator_wave_get(long jarg1, RouteableOscillator jarg1_);
  public final static native void RouteableOscillator_linkOscillator(long jarg1, RouteableOscillator jarg1_);
  public final static native void RouteableOscillator_unlinkOscillator(long jarg1, RouteableOscillator jarg1_);
  public final static native boolean RouteableOscillator_isLinked(long jarg1, RouteableOscillator jarg1_);
  public final static native long RouteableOscillator_getLinkedOscillator(long jarg1, RouteableOscillator jarg1_);
  public final static native long new_ProcessingChain();
  public final static native void delete_ProcessingChain(long jarg1);
  public final static native long ProcessingChain_getActiveProcessors(long jarg1, ProcessingChain jarg1_);
  public final static native void ProcessingChain_addProcessor(long jarg1, ProcessingChain jarg1_, long jarg2, BaseProcessor jarg2_);
  public final static native void ProcessingChain_removeProcessor(long jarg1, ProcessingChain jarg1_, long jarg2, BaseProcessor jarg2_);
  public final static native void ProcessingChain_reset(long jarg1, ProcessingChain jarg1_);
  public final static native long new_BaseProcessor();
  public final static native void delete_BaseProcessor(long jarg1);
  public final static native void BaseProcessor_process(long jarg1, BaseProcessor jarg1_, long jarg2, boolean jarg3);
  public final static native boolean BaseProcessor_isCacheable(long jarg1, BaseProcessor jarg1_);
  public final static native long new_BitCrusher(float jarg1, float jarg2, float jarg3);
  public final static native float BitCrusher_getAmount(long jarg1, BitCrusher jarg1_);
  public final static native void BitCrusher_setAmount(long jarg1, BitCrusher jarg1_, float jarg2);
  public final static native float BitCrusher_getInputMix(long jarg1, BitCrusher jarg1_);
  public final static native void BitCrusher_setInputMix(long jarg1, BitCrusher jarg1_, float jarg2);
  public final static native float BitCrusher_getOutputMix(long jarg1, BitCrusher jarg1_);
  public final static native void BitCrusher_setOutputMix(long jarg1, BitCrusher jarg1_, float jarg2);
  public final static native void BitCrusher_process(long jarg1, BitCrusher jarg1_, long jarg2, boolean jarg3);
  public final static native boolean BitCrusher_isCacheable(long jarg1, BitCrusher jarg1_);
  public final static native void delete_BitCrusher(long jarg1);
  public final static native long new_Decimator(int jarg1, float jarg2);
  public final static native int Decimator_getBits(long jarg1, Decimator jarg1_);
  public final static native void Decimator_setBits(long jarg1, Decimator jarg1_, int jarg2);
  public final static native float Decimator_getRate(long jarg1, Decimator jarg1_);
  public final static native void Decimator_setRate(long jarg1, Decimator jarg1_, float jarg2);
  public final static native void Decimator_process(long jarg1, Decimator jarg1_, long jarg2, boolean jarg3);
  public final static native void delete_Decimator(long jarg1);
  public final static native long new_Delay(int jarg1, int jarg2, float jarg3, float jarg4, int jarg5);
  public final static native void delete_Delay(long jarg1);
  public final static native int Delay_getDelayTime(long jarg1, Delay jarg1_);
  public final static native void Delay_setDelayTime(long jarg1, Delay jarg1_, int jarg2);
  public final static native float Delay_getMix(long jarg1, Delay jarg1_);
  public final static native void Delay_setMix(long jarg1, Delay jarg1_, float jarg2);
  public final static native float Delay_getFeedback(long jarg1, Delay jarg1_);
  public final static native void Delay_setFeedback(long jarg1, Delay jarg1_, float jarg2);
  public final static native void Delay_process(long jarg1, Delay jarg1_, long jarg2, boolean jarg3);
  public final static native void Delay_reset(long jarg1, Delay jarg1_);
  public final static native long new_Filter(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, int jarg6);
  public final static native void delete_Filter(long jarg1);
  public final static native void Filter_setCutoff(long jarg1, Filter jarg1_, float jarg2);
  public final static native float Filter_getCutoff(long jarg1, Filter jarg1_);
  public final static native void Filter_setResonance(long jarg1, Filter jarg1_, float jarg2);
  public final static native float Filter_getResonance(long jarg1, Filter jarg1_);
  public final static native boolean Filter_hasLFO__SWIG_0(long jarg1, Filter jarg1_);
  public final static native void Filter_hasLFO__SWIG_1(long jarg1, Filter jarg1_, boolean jarg2);
  public final static native float Filter_getLFO(long jarg1, Filter jarg1_);
  public final static native void Filter_setLFO(long jarg1, Filter jarg1_, long jarg2, LFO jarg2_);
  public final static native void Filter_setLFORate(long jarg1, Filter jarg1_, float jarg2);
  public final static native void Filter_process(long jarg1, Filter jarg1_, long jarg2, boolean jarg3);
  public final static native boolean Filter_isCacheable(long jarg1, Filter jarg1_);
  public final static native long new_Flanger(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5);
  public final static native void delete_Flanger(long jarg1);
  public final static native float Flanger_getRate(long jarg1, Flanger jarg1_);
  public final static native void Flanger_setRate(long jarg1, Flanger jarg1_, float jarg2);
  public final static native float Flanger_getWidth(long jarg1, Flanger jarg1_);
  public final static native void Flanger_setWidth(long jarg1, Flanger jarg1_, float jarg2);
  public final static native float Flanger_getFeedback(long jarg1, Flanger jarg1_);
  public final static native void Flanger_setFeedback(long jarg1, Flanger jarg1_, float jarg2);
  public final static native float Flanger_getDelay(long jarg1, Flanger jarg1_);
  public final static native void Flanger_setDelay(long jarg1, Flanger jarg1_, float jarg2);
  public final static native float Flanger_getMix(long jarg1, Flanger jarg1_);
  public final static native void Flanger_setMix(long jarg1, Flanger jarg1_, float jarg2);
  public final static native void Flanger_process(long jarg1, Flanger jarg1_, long jarg2, boolean jarg3);
  public final static native long new_Limiter__SWIG_0();
  public final static native long new_Limiter__SWIG_1(float jarg1, float jarg2, int jarg3, int jarg4);
  public final static native void delete_Limiter(long jarg1);
  public final static native float Limiter_getLinearGR(long jarg1, Limiter jarg1_);
  public final static native void Limiter_process(long jarg1, Limiter jarg1_, long jarg2, boolean jarg3);
  public final static native boolean Limiter_isCacheable(long jarg1, Limiter jarg1_);
  public final static native long new_Finalizer(float jarg1, float jarg2, int jarg3, int jarg4);
  public final static native void delete_Finalizer(long jarg1);
  public final static native void Finalizer_process(long jarg1, Finalizer jarg1_, long jarg2, boolean jarg3);
  public final static native long new_LowPassFilter(float jarg1);
  public final static native void delete_LowPassFilter(long jarg1);
  public final static native float LowPassFilter_getCutoff(long jarg1, LowPassFilter jarg1_);
  public final static native void LowPassFilter_setCutoff(long jarg1, LowPassFilter jarg1_, float jarg2);
  public final static native void LowPassFilter_process(long jarg1, LowPassFilter jarg1_, long jarg2, boolean jarg3);
  public final static native long LowPassFilter_processSingle(long jarg1, LowPassFilter jarg1_, long jarg2);
  public final static native long new_LPFHPFilter(float jarg1, float jarg2, int jarg3);
  public final static native void delete_LPFHPFilter(long jarg1);
  public final static native void LPFHPFilter_setLPF(long jarg1, LPFHPFilter jarg1_, float jarg2, int jarg3);
  public final static native void LPFHPFilter_setHPF(long jarg1, LPFHPFilter jarg1_, float jarg2, int jarg3);
  public final static native void LPFHPFilter_process(long jarg1, LPFHPFilter jarg1_, long jarg2, boolean jarg3);
  public final static native long new_FrequencyModulator(int jarg1, float jarg2);
  public final static native void FrequencyModulator_process(long jarg1, FrequencyModulator jarg1_, long jarg2, boolean jarg3);
  public final static native float FrequencyModulator_getRate(long jarg1, FrequencyModulator jarg1_);
  public final static native void FrequencyModulator_setRate(long jarg1, FrequencyModulator jarg1_, float jarg2);
  public final static native int FrequencyModulator_getWave(long jarg1, FrequencyModulator jarg1_);
  public final static native void FrequencyModulator_setWave(long jarg1, FrequencyModulator jarg1_, int jarg2);
  public final static native void delete_FrequencyModulator(long jarg1);
  public final static native long new_FormantFilter(double jarg1);
  public final static native void delete_FormantFilter(long jarg1);
  public final static native void FormantFilter_setVowel(long jarg1, FormantFilter jarg1_, double jarg2);
  public final static native double FormantFilter_getVowel(long jarg1, FormantFilter jarg1_);
  public final static native void FormantFilter_process(long jarg1, FormantFilter jarg1_, long jarg2, boolean jarg3);
  public final static native boolean FormantFilter_isCacheable(long jarg1, FormantFilter jarg1_);
  public final static native int FormantFilter_VOWEL_A_get();
  public final static native int FormantFilter_VOWEL_E_get();
  public final static native int FormantFilter_VOWEL_I_get();
  public final static native int FormantFilter_VOWEL_O_get();
  public final static native int FormantFilter_VOWEL_U_get();
  public final static native long new_Glitcher(int jarg1, int jarg2);
  public final static native void delete_Glitcher(long jarg1);
  public final static native void Glitcher_setRecording(long jarg1, Glitcher jarg1_, boolean jarg2);
  public final static native void Glitcher_setPlayback(long jarg1, Glitcher jarg1_, boolean jarg2);
  public final static native void Glitcher_setPlaybackRange(long jarg1, Glitcher jarg1_, int jarg2, int jarg3);
  public final static native int Glitcher_getSampleLength(long jarg1, Glitcher jarg1_);
  public final static native void Glitcher_process(long jarg1, Glitcher jarg1_, long jarg2, boolean jarg3);
  public final static native long new_AllPassDelay();
  public final static native void AllPassDelay_delay(long jarg1, AllPassDelay jarg1_, float jarg2);
  public final static native float AllPassDelay_update(long jarg1, AllPassDelay jarg1_, float jarg2);
  public final static native void delete_AllPassDelay(long jarg1);
  public final static native long new_Phaser(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5);
  public final static native void delete_Phaser(long jarg1);
  public final static native void Phaser_setDepth(long jarg1, Phaser jarg1_, float jarg2);
  public final static native float Phaser_getDepth(long jarg1, Phaser jarg1_);
  public final static native void Phaser_setFeedback(long jarg1, Phaser jarg1_, float jarg2);
  public final static native float Phaser_getFeedback(long jarg1, Phaser jarg1_);
  public final static native void Phaser_setRate(long jarg1, Phaser jarg1_, float jarg2);
  public final static native float Phaser_getRate(long jarg1, Phaser jarg1_);
  public final static native void Phaser_setRange(long jarg1, Phaser jarg1_, float jarg2, float jarg3);
  public final static native void Phaser_process(long jarg1, Phaser jarg1_, long jarg2, boolean jarg3);
  public final static native double M_PI_get();
  public final static native int MAX_FRAME_LENGTH_get();
  public final static native long new_PitchShifter(float jarg1, int jarg2);
  public final static native void delete_PitchShifter(long jarg1);
  public final static native void PitchShifter_process(long jarg1, PitchShifter jarg1_, long jarg2, boolean jarg3);
  public final static native boolean PitchShifter_isCacheable(long jarg1, PitchShifter jarg1_);
  public final static native void PitchShifter_pitchShift_set(long jarg1, PitchShifter jarg1_, float jarg2);
  public final static native float PitchShifter_pitchShift_get(long jarg1, PitchShifter jarg1_);
  public final static native int Tremolo_ENVELOPE_PRECISION_get();
  public final static native long new_Tremolo(int jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6);
  public final static native void delete_Tremolo(long jarg1);
  public final static native int Tremolo_getLeftAttack(long jarg1, Tremolo jarg1_);
  public final static native void Tremolo_setLeftAttack(long jarg1, Tremolo jarg1_, int jarg2);
  public final static native int Tremolo_getRightAttack(long jarg1, Tremolo jarg1_);
  public final static native void Tremolo_setRightAttack(long jarg1, Tremolo jarg1_, int jarg2);
  public final static native int Tremolo_getLeftDecay(long jarg1, Tremolo jarg1_);
  public final static native void Tremolo_setLeftDecay(long jarg1, Tremolo jarg1_, int jarg2);
  public final static native int Tremolo_getRightDecay(long jarg1, Tremolo jarg1_);
  public final static native void Tremolo_setRightDecay(long jarg1, Tremolo jarg1_, int jarg2);
  public final static native long Tremolo_getTableForChannel(long jarg1, Tremolo jarg1_, int jarg2);
  public final static native boolean Tremolo_isStereo(long jarg1, Tremolo jarg1_);
  public final static native void Tremolo_process(long jarg1, Tremolo jarg1_, long jarg2, boolean jarg3);
  public final static native long new_WaveShaper(float jarg1, float jarg2);
  public final static native float WaveShaper_getAmount(long jarg1, WaveShaper jarg1_);
  public final static native void WaveShaper_setAmount(long jarg1, WaveShaper jarg1_, float jarg2);
  public final static native float WaveShaper_getLevel(long jarg1, WaveShaper jarg1_);
  public final static native void WaveShaper_setLevel(long jarg1, WaveShaper jarg1_, float jarg2);
  public final static native void WaveShaper_process(long jarg1, WaveShaper jarg1_, long jarg2, boolean jarg3);
  public final static native void delete_WaveShaper(long jarg1);
  public final static native double BufferUtility_getBPMbyLength(double jarg1, int jarg2);
  public final static native double BufferUtility_getBPMbySamples(int jarg1, int jarg2, int jarg3);
  public final static native int BufferUtility_bufferToMilliseconds(int jarg1, int jarg2);
  public final static native int BufferUtility_millisecondsToBuffer(int jarg1, int jarg2);
  public final static native float BufferUtility_bufferToSeconds(int jarg1, int jarg2);
  public final static native int BufferUtility_secondsToBuffer(float jarg1, int jarg2);
  public final static native int BufferUtility_getBitRate(int jarg1, int jarg2, int jarg3);
  public final static native int BufferUtility_calculateSamplesPerBeatDivision(int jarg1, double jarg2, int jarg3);
  public final static native int BufferUtility_getSamplesPerBeat(int jarg1, double jarg2);
  public final static native int BufferUtility_getSamplesPerBar(int jarg1, double jarg2, int jarg3, int jarg4);
  public final static native int BufferUtility_calculateBufferLength__SWIG_0(long jarg1);
  public final static native int BufferUtility_calculateBufferLength__SWIG_1(int jarg1);
  public final static native long BufferUtility_generateSilentBuffer(int jarg1);
  public final static native void BufferUtility_bufferToFile(String jarg1, long jarg2, int jarg3);
  public final static native long new_BufferUtility();
  public final static native void delete_BufferUtility(long jarg1);
  public final static native long new_BulkCacher(boolean jarg1);
  public final static native void delete_BulkCacher(long jarg1);
  public final static native void BulkCacher_addToQueue__SWIG_0(long jarg1, BulkCacher jarg1_, long jarg2);
  public final static native void BulkCacher_addToQueue__SWIG_1(long jarg1, BulkCacher jarg1_, long jarg2, BaseCacheableAudioEvent jarg2_);
  public final static native boolean BulkCacher_removeFromQueue(long jarg1, BulkCacher jarg1_, long jarg2, BaseCacheableAudioEvent jarg2_);
  public final static native boolean BulkCacher_hasQueue(long jarg1, BulkCacher jarg1_);
  public final static native void BulkCacher_cacheQueue(long jarg1, BulkCacher jarg1_);
  public final static native void BulkCacher_clearQueue(long jarg1, BulkCacher jarg1_);
  public final static native long LevelUtility_RMS(long jarg1, AudioChannel jarg1_, int jarg2);
  public final static native long LevelUtility_dBSPL(long jarg1, AudioChannel jarg1_, int jarg2);
  public final static native long LevelUtility_linear(long jarg1, AudioChannel jarg1_, int jarg2);
  public final static native long new_LevelUtility();
  public final static native void delete_LevelUtility(long jarg1);
  public final static native long new_DrumPattern(int jarg1, long jarg2, BaseInstrument jarg2_);
  public final static native void delete_DrumPattern(long jarg1);
  public final static native int DrumPattern_AMOUNT_OF_STEPS_get();
  public final static native int DrumPattern_EVENT_OFF_get();
  public final static native int DrumPattern_EVENT_ON_get();
  public final static native void DrumPattern_num_set(long jarg1, DrumPattern jarg1_, int jarg2);
  public final static native int DrumPattern_num_get(long jarg1, DrumPattern jarg1_);
  public final static native void DrumPattern_eventAmount_set(long jarg1, DrumPattern jarg1_, int jarg2);
  public final static native int DrumPattern_eventAmount_get(long jarg1, DrumPattern jarg1_);
  public final static native void DrumPattern_audioEvents_set(long jarg1, DrumPattern jarg1_, long jarg2);
  public final static native long DrumPattern_audioEvents_get(long jarg1, DrumPattern jarg1_);
  public final static native void DrumPattern_addToInstrument(long jarg1, DrumPattern jarg1_);
  public final static native void DrumPattern_removeFromInstrument(long jarg1, DrumPattern jarg1_);
  public final static native void DrumPattern_updateTimbre(long jarg1, DrumPattern jarg1_, int jarg2);
  public final static native void DrumPattern_cacheEvents(long jarg1, DrumPattern jarg1_, int jarg2);
  public final static native void DrumPattern_addDrumEvent(long jarg1, DrumPattern jarg1_, int jarg2, int jarg3, int jarg4);
  public final static native void DrumPattern_removeDrumEvent(long jarg1, DrumPattern jarg1_, int jarg2, int jarg3);
  public final static native boolean DrumPattern_hasContent(long jarg1, DrumPattern jarg1_);
  public final static native void DrumPattern_clear(long jarg1, DrumPattern jarg1_);
  public final static native long DrumPattern_getKickPattern(long jarg1, DrumPattern jarg1_);
  public final static native long DrumPattern_getSnarePattern(long jarg1, DrumPattern jarg1_);
  public final static native long DrumPattern_getStickPattern(long jarg1, DrumPattern jarg1_);
  public final static native long DrumPattern_getHatPattern(long jarg1, DrumPattern jarg1_);
  public final static native void DrumPattern_setKickPattern(long jarg1, DrumPattern jarg1_, long jarg2, int jarg3);
  public final static native void DrumPattern_setSnarePattern(long jarg1, DrumPattern jarg1_, long jarg2, int jarg3);
  public final static native void DrumPattern_setStickPattern(long jarg1, DrumPattern jarg1_, long jarg2, int jarg3);
  public final static native void DrumPattern_setHatPattern(long jarg1, DrumPattern jarg1_, long jarg2, int jarg3);
  public final static native void cachedSample_sampleLength_set(long jarg1, cachedSample jarg1_, int jarg2);
  public final static native int cachedSample_sampleLength_get(long jarg1, cachedSample jarg1_);
  public final static native void cachedSample_sampleBuffer_set(long jarg1, cachedSample jarg1_, long jarg2);
  public final static native long cachedSample_sampleBuffer_get(long jarg1, cachedSample jarg1_);
  public final static native long new_cachedSample();
  public final static native void delete_cachedSample(long jarg1);
  public final static native void SampleManager_setSample(String jarg1, long jarg2);
  public final static native long SampleManager_getSample(String jarg1);
  public final static native int SampleManager_getSampleLength(String jarg1);
  public final static native boolean SampleManager_hasSample(String jarg1);
  public final static native void SampleManager_removeSample(String jarg1);
  public final static native void SampleManager_flushSamples();
  public final static native long new_SampleManager();
  public final static native void delete_SampleManager(long jarg1);
  public final static native void _sampleMap_set(long jarg1);
  public final static native long _sampleMap_get();
  public final static native long new_BaseInstrument();
  public final static native void delete_BaseInstrument(long jarg1);
  public final static native boolean BaseInstrument_hasEvents(long jarg1, BaseInstrument jarg1_);
  public final static native boolean BaseInstrument_hasLiveEvents(long jarg1, BaseInstrument jarg1_);
  public final static native void BaseInstrument_updateEvents(long jarg1, BaseInstrument jarg1_);
  public final static native long BaseInstrument_getEvents(long jarg1, BaseInstrument jarg1_);
  public final static native long BaseInstrument_getLiveEvents(long jarg1, BaseInstrument jarg1_);
  public final static native void BaseInstrument_clearEvents(long jarg1, BaseInstrument jarg1_);
  public final static native boolean BaseInstrument_removeEvent(long jarg1, BaseInstrument jarg1_, long jarg2, BaseAudioEvent jarg2_, boolean jarg3);
  public final static native void BaseInstrument_registerInSequencer(long jarg1, BaseInstrument jarg1_);
  public final static native void BaseInstrument_unregisterFromSequencer(long jarg1, BaseInstrument jarg1_);
  public final static native void BaseInstrument_volume_set(long jarg1, BaseInstrument jarg1_, float jarg2);
  public final static native float BaseInstrument_volume_get(long jarg1, BaseInstrument jarg1_);
  public final static native void BaseInstrument_audioChannel_set(long jarg1, BaseInstrument jarg1_, long jarg2, AudioChannel jarg2_);
  public final static native long BaseInstrument_audioChannel_get(long jarg1, BaseInstrument jarg1_);
  public final static native void BaseInstrument_index_set(long jarg1, BaseInstrument jarg1_, int jarg2);
  public final static native int BaseInstrument_index_get(long jarg1, BaseInstrument jarg1_);
  public final static native long new_DrumInstrument();
  public final static native void delete_DrumInstrument(long jarg1);
  public final static native long DrumInstrument_getEvents(long jarg1, DrumInstrument jarg1_);
  public final static native long DrumInstrument_getEventsForPattern(long jarg1, DrumInstrument jarg1_, int jarg2);
  public final static native long DrumInstrument_getEventsForActivePattern(long jarg1, DrumInstrument jarg1_);
  public final static native void DrumInstrument_drumTimbre_set(long jarg1, DrumInstrument jarg1_, int jarg2);
  public final static native int DrumInstrument_drumTimbre_get(long jarg1, DrumInstrument jarg1_);
  public final static native void DrumInstrument_drumPatterns_set(long jarg1, DrumInstrument jarg1_, long jarg2);
  public final static native long DrumInstrument_drumPatterns_get(long jarg1, DrumInstrument jarg1_);
  public final static native void DrumInstrument_activeDrumPattern_set(long jarg1, DrumInstrument jarg1_, int jarg2);
  public final static native int DrumInstrument_activeDrumPattern_get(long jarg1, DrumInstrument jarg1_);
  public final static native void DrumInstrument_rOsc_set(long jarg1, DrumInstrument jarg1_, long jarg2, RouteableOscillator jarg2_);
  public final static native long DrumInstrument_rOsc_get(long jarg1, DrumInstrument jarg1_);
  public final static native boolean DrumInstrument_hasEvents(long jarg1, DrumInstrument jarg1_);
  public final static native void DrumInstrument_updateEvents(long jarg1, DrumInstrument jarg1_);
  public final static native void DrumInstrument_clearEvents(long jarg1, DrumInstrument jarg1_);
  public final static native boolean DrumInstrument_removeEvent(long jarg1, DrumInstrument jarg1_, long jarg2, BaseAudioEvent jarg2_, boolean jarg3);
  public final static native long DrumInstrument_getDrumPattern(long jarg1, DrumInstrument jarg1_, int jarg2);
  public final static native int DrumInstrument_setDrumPattern(long jarg1, DrumInstrument jarg1_, long jarg2, DrumPattern jarg2_);
  public final static native long new_SampledInstrument();
  public final static native void delete_SampledInstrument(long jarg1);
  public final static native boolean SampledInstrument_removeEvent(long jarg1, SampledInstrument jarg1_, long jarg2, BaseAudioEvent jarg2_, boolean jarg3);
  public final static native void SampledInstrument_updateEvents(long jarg1, SampledInstrument jarg1_);
  public final static native long new_SynthInstrument();
  public final static native void delete_SynthInstrument(long jarg1);
  public final static native void SynthInstrument_octave_set(long jarg1, SynthInstrument jarg1_, int jarg2);
  public final static native int SynthInstrument_octave_get(long jarg1, SynthInstrument jarg1_);
  public final static native void SynthInstrument_keyboardOctave_set(long jarg1, SynthInstrument jarg1_, int jarg2);
  public final static native int SynthInstrument_keyboardOctave_get(long jarg1, SynthInstrument jarg1_);
  public final static native void SynthInstrument_keyboardVolume_set(long jarg1, SynthInstrument jarg1_, float jarg2);
  public final static native float SynthInstrument_keyboardVolume_get(long jarg1, SynthInstrument jarg1_);
  public final static native void SynthInstrument_synthesizer_set(long jarg1, SynthInstrument jarg1_, long jarg2);
  public final static native long SynthInstrument_synthesizer_get(long jarg1, SynthInstrument jarg1_);
  public final static native int SynthInstrument_getOscillatorAmount(long jarg1, SynthInstrument jarg1_);
  public final static native void SynthInstrument_setOscillatorAmount(long jarg1, SynthInstrument jarg1_, int jarg2);
  public final static native void SynthInstrument_reserveOscillators(long jarg1, SynthInstrument jarg1_, int jarg2);
  public final static native long SynthInstrument_getOscillatorProperties(long jarg1, SynthInstrument jarg1_, int jarg2);
  public final static native void SynthInstrument_arpeggiator_set(long jarg1, SynthInstrument jarg1_, long jarg2, Arpeggiator jarg2_);
  public final static native long SynthInstrument_arpeggiator_get(long jarg1, SynthInstrument jarg1_);
  public final static native void SynthInstrument_arpeggiatorActive_set(long jarg1, SynthInstrument jarg1_, boolean jarg2);
  public final static native boolean SynthInstrument_arpeggiatorActive_get(long jarg1, SynthInstrument jarg1_);
  public final static native void SynthInstrument_rOsc_set(long jarg1, SynthInstrument jarg1_, long jarg2, RouteableOscillator jarg2_);
  public final static native long SynthInstrument_rOsc_get(long jarg1, SynthInstrument jarg1_);
  public final static native void SynthInstrument_adsr_set(long jarg1, SynthInstrument jarg1_, long jarg2, ADSR jarg2_);
  public final static native long SynthInstrument_adsr_get(long jarg1, SynthInstrument jarg1_);
  public final static native void SynthInstrument_updateEvents(long jarg1, SynthInstrument jarg1_);
  public final static native boolean SynthInstrument_removeEvent(long jarg1, SynthInstrument jarg1_, long jarg2, BaseAudioEvent jarg2_, boolean jarg3);
  public final static native long new_OscillatorProperties(int jarg1, float jarg2, int jarg3, int jarg4);
  public final static native void delete_OscillatorProperties(long jarg1);
  public final static native int OscillatorProperties_getWaveform(long jarg1, OscillatorProperties jarg1_);
  public final static native void OscillatorProperties_setWaveform(long jarg1, OscillatorProperties jarg1_, int jarg2);
  public final static native void OscillatorProperties_detune_set(long jarg1, OscillatorProperties jarg1_, float jarg2);
  public final static native float OscillatorProperties_detune_get(long jarg1, OscillatorProperties jarg1_);
  public final static native void OscillatorProperties_octaveShift_set(long jarg1, OscillatorProperties jarg1_, int jarg2);
  public final static native int OscillatorProperties_octaveShift_get(long jarg1, OscillatorProperties jarg1_);
  public final static native void OscillatorProperties_fineShift_set(long jarg1, OscillatorProperties jarg1_, int jarg2);
  public final static native int OscillatorProperties_fineShift_get(long jarg1, OscillatorProperties jarg1_);
  public final static native void OscillatorProperties_waveTable_set(long jarg1, OscillatorProperties jarg1_, long jarg2);
  public final static native long OscillatorProperties_waveTable_get(long jarg1, OscillatorProperties jarg1_);
  public final static native long new_BaseAudioEvent__SWIG_0(long jarg1, BaseInstrument jarg1_);
  public final static native long new_BaseAudioEvent__SWIG_1();
  public final static native void delete_BaseAudioEvent(long jarg1);
  public final static native void BaseAudioEvent_mixBuffer(long jarg1, BaseAudioEvent jarg1_, long jarg2, int jarg3, int jarg4, int jarg5, boolean jarg6, int jarg7, boolean jarg8);
  public final static native long BaseAudioEvent_getBuffer(long jarg1, BaseAudioEvent jarg1_);
  public final static native void BaseAudioEvent_setBuffer(long jarg1, BaseAudioEvent jarg1_, long jarg2, boolean jarg3);
  public final static native boolean BaseAudioEvent_hasBuffer(long jarg1, BaseAudioEvent jarg1_);
  public final static native long BaseAudioEvent_synthesize(long jarg1, BaseAudioEvent jarg1_, int jarg2);
  public final static native long BaseAudioEvent_getInstrument(long jarg1, BaseAudioEvent jarg1_);
  public final static native void BaseAudioEvent_setInstrument(long jarg1, BaseAudioEvent jarg1_, long jarg2, BaseInstrument jarg2_);
  public final static native void BaseAudioEvent_addToSequencer(long jarg1, BaseAudioEvent jarg1_);
  public final static native void BaseAudioEvent_removeFromSequencer(long jarg1, BaseAudioEvent jarg1_);
  public final static native void BaseAudioEvent_isSequenced_set(long jarg1, BaseAudioEvent jarg1_, boolean jarg2);
  public final static native boolean BaseAudioEvent_isSequenced_get(long jarg1, BaseAudioEvent jarg1_);
  public final static native void BaseAudioEvent_setSampleLength(long jarg1, BaseAudioEvent jarg1_, int jarg2);
  public final static native void BaseAudioEvent_setSampleStart(long jarg1, BaseAudioEvent jarg1_, int jarg2);
  public final static native void BaseAudioEvent_setSampleEnd(long jarg1, BaseAudioEvent jarg1_, int jarg2);
  public final static native int BaseAudioEvent_getSampleLength(long jarg1, BaseAudioEvent jarg1_);
  public final static native int BaseAudioEvent_getSampleStart(long jarg1, BaseAudioEvent jarg1_);
  public final static native int BaseAudioEvent_getSampleEnd(long jarg1, BaseAudioEvent jarg1_);
  public final static native void BaseAudioEvent_setStartPosition(long jarg1, BaseAudioEvent jarg1_, float jarg2);
  public final static native void BaseAudioEvent_setEndPosition(long jarg1, BaseAudioEvent jarg1_, float jarg2);
  public final static native void BaseAudioEvent_setDuration(long jarg1, BaseAudioEvent jarg1_, float jarg2);
  public final static native float BaseAudioEvent_getStartPosition(long jarg1, BaseAudioEvent jarg1_);
  public final static native float BaseAudioEvent_getEndPosition(long jarg1, BaseAudioEvent jarg1_);
  public final static native float BaseAudioEvent_getDuration(long jarg1, BaseAudioEvent jarg1_);
  public final static native void BaseAudioEvent_positionEvent(long jarg1, BaseAudioEvent jarg1_, int jarg2, int jarg3, int jarg4);
  public final static native int BaseAudioEvent_getReadPointer(long jarg1, BaseAudioEvent jarg1_);
  public final static native boolean BaseAudioEvent_isLoopeable(long jarg1, BaseAudioEvent jarg1_);
  public final static native void BaseAudioEvent_setLoopeable(long jarg1, BaseAudioEvent jarg1_, boolean jarg2);
  public final static native boolean BaseAudioEvent_isDeletable(long jarg1, BaseAudioEvent jarg1_);
  public final static native void BaseAudioEvent_setDeletable(long jarg1, BaseAudioEvent jarg1_, boolean jarg2);
  public final static native boolean BaseAudioEvent_isEnabled(long jarg1, BaseAudioEvent jarg1_);
  public final static native void BaseAudioEvent_setEnabled(long jarg1, BaseAudioEvent jarg1_, boolean jarg2);
  public final static native void BaseAudioEvent_lock(long jarg1, BaseAudioEvent jarg1_);
  public final static native void BaseAudioEvent_unlock(long jarg1, BaseAudioEvent jarg1_);
  public final static native boolean BaseAudioEvent_isLocked(long jarg1, BaseAudioEvent jarg1_);
  public final static native float BaseAudioEvent_getVolume(long jarg1, BaseAudioEvent jarg1_);
  public final static native void BaseAudioEvent_setVolume(long jarg1, BaseAudioEvent jarg1_, float jarg2);
  public final static native long new_BaseCacheableAudioEvent(long jarg1, BaseInstrument jarg1_);
  public final static native void delete_BaseCacheableAudioEvent(long jarg1);
  public final static native void BaseCacheableAudioEvent_setAutoCache(long jarg1, BaseCacheableAudioEvent jarg1_, boolean jarg2);
  public final static native void BaseCacheableAudioEvent_cache(long jarg1, BaseCacheableAudioEvent jarg1_, boolean jarg2);
  public final static native boolean BaseCacheableAudioEvent_isCached(long jarg1, BaseCacheableAudioEvent jarg1_);
  public final static native void BaseCacheableAudioEvent_setBulkCacheable(long jarg1, BaseCacheableAudioEvent jarg1_, boolean jarg2);
  public final static native void CachedProperties_ADSRenvelope_set(long jarg1, CachedProperties jarg1_, long jarg2);
  public final static native long CachedProperties_ADSRenvelope_get(long jarg1, CachedProperties jarg1_);
  public final static native void CachedProperties_phaseIncr_set(long jarg1, CachedProperties jarg1_, long jarg2);
  public final static native long CachedProperties_phaseIncr_get(long jarg1, CachedProperties jarg1_);
  public final static native void CachedProperties_arpeggioPosition_set(long jarg1, CachedProperties jarg1_, int jarg2);
  public final static native int CachedProperties_arpeggioPosition_get(long jarg1, CachedProperties jarg1_);
  public final static native void CachedProperties_arpeggioStep_set(long jarg1, CachedProperties jarg1_, int jarg2);
  public final static native int CachedProperties_arpeggioStep_get(long jarg1, CachedProperties jarg1_);
  public final static native void CachedProperties_oscillatorPhases_set(long jarg1, CachedProperties jarg1_, long jarg2);
  public final static native long CachedProperties_oscillatorPhases_get(long jarg1, CachedProperties jarg1_);
  public final static native long new_CachedProperties();
  public final static native void delete_CachedProperties(long jarg1);
  public final static native long new_BaseSynthEvent__SWIG_0();
  public final static native long new_BaseSynthEvent__SWIG_1(float jarg1, int jarg2, float jarg3, long jarg4, SynthInstrument jarg4_);
  public final static native long new_BaseSynthEvent__SWIG_2(float jarg1, long jarg2, SynthInstrument jarg2_);
  public final static native void delete_BaseSynthEvent(long jarg1);
  public final static native void BaseSynthEvent_instanceId_set(long jarg1, BaseSynthEvent jarg1_, long jarg2);
  public final static native long BaseSynthEvent_instanceId_get(long jarg1, BaseSynthEvent jarg1_);
  public final static native void BaseSynthEvent_position_set(long jarg1, BaseSynthEvent jarg1_, int jarg2);
  public final static native int BaseSynthEvent_position_get(long jarg1, BaseSynthEvent jarg1_);
  public final static native void BaseSynthEvent_length_set(long jarg1, BaseSynthEvent jarg1_, float jarg2);
  public final static native float BaseSynthEvent_length_get(long jarg1, BaseSynthEvent jarg1_);
  public final static native float BaseSynthEvent_getFrequency(long jarg1, BaseSynthEvent jarg1_);
  public final static native float BaseSynthEvent_getBaseFrequency(long jarg1, BaseSynthEvent jarg1_);
  public final static native void BaseSynthEvent_setFrequency__SWIG_0(long jarg1, BaseSynthEvent jarg1_, float jarg2);
  public final static native void BaseSynthEvent_setFrequency__SWIG_1(long jarg1, BaseSynthEvent jarg1_, float jarg2, boolean jarg3);
  public final static native void BaseSynthEvent_cachedProps_set(long jarg1, BaseSynthEvent jarg1_, long jarg2, CachedProperties jarg2_);
  public final static native long BaseSynthEvent_cachedProps_get(long jarg1, BaseSynthEvent jarg1_);
  public final static native long BaseSynthEvent_getPhaseForOscillator(long jarg1, BaseSynthEvent jarg1_, int jarg2);
  public final static native void BaseSynthEvent_setPhaseForOscillator(long jarg1, BaseSynthEvent jarg1_, int jarg2, long jarg3);
  public final static native void BaseSynthEvent_lastWriteIndex_set(long jarg1, BaseSynthEvent jarg1_, int jarg2);
  public final static native int BaseSynthEvent_lastWriteIndex_get(long jarg1, BaseSynthEvent jarg1_);
  public final static native void BaseSynthEvent_invalidateProperties(long jarg1, BaseSynthEvent jarg1_, int jarg2, float jarg3, long jarg4, SynthInstrument jarg4_);
  public final static native void BaseSynthEvent_calculateBuffers(long jarg1, BaseSynthEvent jarg1_);
  public final static native void BaseSynthEvent_mixBuffer(long jarg1, BaseSynthEvent jarg1_, long jarg2, int jarg3, int jarg4, int jarg5, boolean jarg6, int jarg7, boolean jarg8);
  public final static native long BaseSynthEvent_synthesize(long jarg1, BaseSynthEvent jarg1_, int jarg2);
  public final static native void BaseSynthEvent_unlock(long jarg1, BaseSynthEvent jarg1_);
  public final static native long new_SampleEvent__SWIG_0();
  public final static native long new_SampleEvent__SWIG_1(long jarg1, BaseInstrument jarg1_);
  public final static native void delete_SampleEvent(long jarg1);
  public final static native int SampleEvent_getBufferRangeStart(long jarg1, SampleEvent jarg1_);
  public final static native void SampleEvent_setBufferRangeStart(long jarg1, SampleEvent jarg1_, int jarg2);
  public final static native int SampleEvent_getBufferRangeEnd(long jarg1, SampleEvent jarg1_);
  public final static native void SampleEvent_setBufferRangeEnd(long jarg1, SampleEvent jarg1_, int jarg2);
  public final static native int SampleEvent_getBufferRangeLength(long jarg1, SampleEvent jarg1_);
  public final static native long SampleEvent_synthesize(long jarg1, SampleEvent jarg1_, int jarg2);
  public final static native void SampleEvent_setSample(long jarg1, SampleEvent jarg1_, long jarg2);
  public final static native void SampleEvent_mixBuffer(long jarg1, SampleEvent jarg1_, long jarg2, int jarg3, int jarg4, int jarg5, boolean jarg6, int jarg7, boolean jarg8);
  public final static native boolean SampleEvent_getRangeBasedPlayback(long jarg1, SampleEvent jarg1_);
  public final static native void SampleEvent_setRangeBasedPlayback(long jarg1, SampleEvent jarg1_, boolean jarg2);
  public final static native boolean SampleEvent_getBufferForRange(long jarg1, SampleEvent jarg1_, long jarg2, int jarg3);
  public final static native int SampleEvent_getPlaybackPosition(long jarg1, SampleEvent jarg1_);
  public final static native void SampleEvent_play(long jarg1, SampleEvent jarg1_);
  public final static native void SampleEvent_stop(long jarg1, SampleEvent jarg1_);
  public final static native long new_DrumEvent(int jarg1, int jarg2, int jarg3, long jarg4, BaseInstrument jarg4_);
  public final static native void delete_DrumEvent(long jarg1);
  public final static native void DrumEvent_position_set(long jarg1, DrumEvent jarg1_, int jarg2);
  public final static native int DrumEvent_position_get(long jarg1, DrumEvent jarg1_);
  public final static native int DrumEvent_getTimbre(long jarg1, DrumEvent jarg1_);
  public final static native void DrumEvent_setTimbre(long jarg1, DrumEvent jarg1_, int jarg2);
  public final static native int DrumEvent_getType(long jarg1, DrumEvent jarg1_);
  public final static native void DrumEvent_setType(long jarg1, DrumEvent jarg1_, int jarg2);
  public final static native void DrumEvent_unlock(long jarg1, DrumEvent jarg1_);
  public final static native long new_PercussionTypes();
  public final static native void delete_PercussionTypes(long jarg1);
  public final static native long new_DrumTimbres();
  public final static native void delete_DrumTimbres(long jarg1);
  public final static native long new_SynthEvent__SWIG_0(float jarg1, int jarg2, float jarg3, long jarg4, SynthInstrument jarg4_);
  public final static native long new_SynthEvent__SWIG_1(float jarg1, long jarg2, SynthInstrument jarg2_);
  public final static native void delete_SynthEvent(long jarg1);
  public final static native long new_SequencerController();
  public final static native void delete_SequencerController(long jarg1);
  public final static native void SequencerController_prepare(long jarg1, SequencerController jarg1_, int jarg2, int jarg3, float jarg4, int jarg5, int jarg6);
  public final static native float SequencerController_getTempo(long jarg1, SequencerController jarg1_);
  public final static native void SequencerController_setTempo(long jarg1, SequencerController jarg1_, float jarg2, int jarg3, int jarg4);
  public final static native void SequencerController_setTempoNow(long jarg1, SequencerController jarg1_, float jarg2, int jarg3, int jarg4);
  public final static native void SequencerController_setVolume(long jarg1, SequencerController jarg1_, float jarg2);
  public final static native void SequencerController_setPlaying(long jarg1, SequencerController jarg1_, boolean jarg2);
  public final static native void SequencerController_setLoopRange__SWIG_0(long jarg1, SequencerController jarg1_, int jarg2, int jarg3);
  public final static native void SequencerController_setLoopRange__SWIG_1(long jarg1, SequencerController jarg1_, int jarg2, int jarg3, int jarg4);
  public final static native int SequencerController_getStepPosition(long jarg1, SequencerController jarg1_);
  public final static native int SequencerController_getBufferPosition(long jarg1, SequencerController jarg1_);
  public final static native void SequencerController_setBufferPosition(long jarg1, SequencerController jarg1_, int jarg2);
  public final static native void SequencerController_updateStepsPerBar(long jarg1, SequencerController jarg1_, int jarg2);
  public final static native void SequencerController_updateMeasures(long jarg1, SequencerController jarg1_, int jarg2, int jarg3);
  public final static native int SequencerController_getSamplesPerBeat(long jarg1, SequencerController jarg1_);
  public final static native int SequencerController_getSamplesPerStep(long jarg1, SequencerController jarg1_);
  public final static native int SequencerController_getSamplesPerBar(long jarg1, SequencerController jarg1_);
  public final static native int SequencerController_getTimeSigBeatAmount(long jarg1, SequencerController jarg1_);
  public final static native int SequencerController_getTimeSigBeatUnit(long jarg1, SequencerController jarg1_);
  public final static native void SequencerController_rewind(long jarg1, SequencerController jarg1_);
  public final static native void SequencerController_setNotificationMarker(long jarg1, SequencerController jarg1_, int jarg2);
  public final static native long SequencerController_getBulkCacher(long jarg1, SequencerController jarg1_);
  public final static native void SequencerController_cacheAudioEventsForMeasure(long jarg1, SequencerController jarg1_, int jarg2);
  public final static native void SequencerController_setBounceState(long jarg1, SequencerController jarg1_, boolean jarg2, int jarg3, String jarg4);
  public final static native void SequencerController_setRecordingState(long jarg1, SequencerController jarg1_, boolean jarg2, int jarg3, String jarg4);
  public final static native void SequencerController_setRecordingFromDeviceState(long jarg1, SequencerController jarg1_, boolean jarg2, int jarg3, String jarg4);
  public final static native long BitCrusher_SWIGUpcast(long jarg1);
  public final static native long Decimator_SWIGUpcast(long jarg1);
  public final static native long Delay_SWIGUpcast(long jarg1);
  public final static native long Filter_SWIGUpcast(long jarg1);
  public final static native long Flanger_SWIGUpcast(long jarg1);
  public final static native long Limiter_SWIGUpcast(long jarg1);
  public final static native long Finalizer_SWIGUpcast(long jarg1);
  public final static native long LowPassFilter_SWIGUpcast(long jarg1);
  public final static native long LPFHPFilter_SWIGUpcast(long jarg1);
  public final static native long FrequencyModulator_SWIGUpcast(long jarg1);
  public final static native long FormantFilter_SWIGUpcast(long jarg1);
  public final static native long Glitcher_SWIGUpcast(long jarg1);
  public final static native long Phaser_SWIGUpcast(long jarg1);
  public final static native long PitchShifter_SWIGUpcast(long jarg1);
  public final static native long Tremolo_SWIGUpcast(long jarg1);
  public final static native long WaveShaper_SWIGUpcast(long jarg1);
  public final static native long DrumInstrument_SWIGUpcast(long jarg1);
  public final static native long SampledInstrument_SWIGUpcast(long jarg1);
  public final static native long SynthInstrument_SWIGUpcast(long jarg1);
  public final static native long BaseCacheableAudioEvent_SWIGUpcast(long jarg1);
  public final static native long BaseSynthEvent_SWIGUpcast(long jarg1);
  public final static native long SampleEvent_SWIGUpcast(long jarg1);
  public final static native long DrumEvent_SWIGUpcast(long jarg1);
  public final static native long SynthEvent_SWIGUpcast(long jarg1);
}
